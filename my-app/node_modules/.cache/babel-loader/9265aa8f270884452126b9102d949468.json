{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactMUI\\\\reactMUI\\\\my-app\\\\src\\\\Components\\\\DisplayTable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\n\nconst db = require('./DB'); // import columns from './DB';\n\n\nexport default function MaterialTableDemo() {\n  var dataDb = [];\n  let requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  fetch('http://localhost:8000/getData', requestOptions).then(res => {\n    return res.json();\n  }).then(data => {\n    // then print response status\n    // data = response.json();\n    console.log('this is the data in fetch:');\n    console.log(data.result);\n  });\n  const [state, setState] = React.useState({\n    columns: db.columns,\n    data: db.data\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Transactions\",\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["D:/reactMUI/reactMUI/my-app/src/Components/DisplayTable.js"],"names":["React","MaterialTable","db","require","MaterialTableDemo","dataDb","requestOptions","method","headers","fetch","then","res","json","data","console","log","result","state","setState","useState","columns","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nconst db = require('./DB');\r\n\r\n// import columns from './DB';\r\n\r\nexport default function MaterialTableDemo() {\r\n  var dataDb = [];\r\n  let requestOptions = {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  };\r\n  fetch('http://localhost:8000/getData', requestOptions)\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      // then print response status\r\n      // data = response.json();\r\n      console.log('this is the data in fetch:');\r\n      console.log(data.result);\r\n    });\r\n\r\n  const [state, setState] = React.useState({\r\n    columns: db.columns,\r\n    data: db.data,\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title='Transactions'\r\n      columns={state.columns}\r\n      data={state.data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.push(newData);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  return { ...prevState, data };\r\n                });\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}